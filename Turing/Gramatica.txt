// Gramatica: C
// Analizador Sintáctivo: Parser de descenso recursivo

Programa -> Librerias Main
Librerias -> #include <Identificador.h> Librerias?
Main -> void main() BloqueInstricciones

BloqueInstricciones -> { Lista_Instrucciones }

Lista_Instrucciones -> Instruccion Lista_Instrucciones?

Instruccion -> Cout | Cin | If | For | While | Do | Asignacion

Asignacion -> Identificador = Expresion ;

Expresion  -> Termino MasTermino
MasTermino -> (OperadorTermino Termino)?
Termino    -> Factor PorFactor
PorFactor  -> (OperadorFactor Factor)?
Factor     -> Numero | Identificador | (Expresion)

For -> for (Asignacion Condicion; Ientificador Incremnto Factor)
       BloqueInstricciones | Instruccion

While -> while (Condicion) BloqueInstricciones | Instruccion ;

Do -> do BloqueInstricciones | Instruccion while (Condicion) ;

Cout -> cout FlujoSalida Cadena | Identificador ;

Cin -> cin FlujoEntrada Identificador ;

If -> if (Condicion) BloqueInstricciones | Instruccion (else BloqueInstricciones | Instruccion)?

Condicion -> Expresion OperadorRelacional Expresion

Lista_Identificadores -> Identificador (, Lista_Identificadores)?

Metodologia:

a) Crear una clase Lenguaje
b) Heredar la clase Sintaxis
c) Programar los 2 constructores para ejecutar los de lexico
d) Cada producción es un método de tipo void y sin argumentos
e) La primera producción es publica y el resto es privada
f) El cuerpo del método es el lado derecho de la produccion
   - Del lado derecho de la produccion hay simbolos
   - EL simbolo puede ser terminal o no terminal (ST, SNT)
   - Los SNT son producciones y cada producción es un método
     entonces se invoca el método 
   - El ST es un token por lo tanto invocar MATCH
g) Si existe una cerradura epsilon ( ? ) entonces insertar una
   condicion que es el caso base de la recursividad
h) Si hay un OR ( | ) entonces programar un IF-ELSE IF-ELSE